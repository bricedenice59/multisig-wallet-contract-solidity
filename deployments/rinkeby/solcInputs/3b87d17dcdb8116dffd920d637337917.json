{
  "language": "Solidity",
  "sources": {
    "contracts/DemoContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nerror Demo__UserDoesNotExist();\n\n/** @title A demo to only allow entities from a multisig wallet to blacklist/un-blacklist a user\n *  @author Brice Grenard\n */\ncontract Demo {\n    struct User {\n        address _address;\n        bool isBlacklisted;\n    }\n    mapping(address => User) private s_users;\n    address s_multiSigWallet;\n\n    // Function\n    /**\n     * For this demo, just initialize a list of users\n     * for simplicity reasons, there is no check on correct addresses or duplicates\n     */\n    constructor(address[] memory listOfUsers, address multiSigWallet) {\n        for (uint256 i = 0; i < listOfUsers.length; i++) {\n            address userAddress = listOfUsers[i];\n            User memory user = User({\n                _address: userAddress,\n                isBlacklisted: false\n            });\n            s_users[userAddress] = user;\n        }\n        s_multiSigWallet = multiSigWallet;\n    }\n\n    modifier onlyMultiSigWallet() {\n        require(msg.sender == address(s_multiSigWallet));\n        _;\n    }\n\n    // Function\n    /**\n     * set user account frozen/unfrozen\n     */\n    function setFreezeUser(address _address, bool isFrozen) private {\n        User storage user = s_users[_address];\n        if (user._address == address(0)) revert Demo__UserDoesNotExist();\n\n        user.isBlacklisted = isFrozen;\n    }\n\n    // Function\n    /**\n     * Freeze user account\n     */\n    function freezeUser(address user) external onlyMultiSigWallet {\n        setFreezeUser(user, true);\n    }\n\n    // Function\n    /**\n     * Unfreeze user account\n     */\n    function unFreezeUser(address user) external onlyMultiSigWallet {\n        setFreezeUser(user, false);\n    }\n\n    function getUserAtIndex(address _address)\n        external\n        view\n        returns (User memory user)\n    {\n        user = s_users[_address];\n    }\n\n    fallback() external {}\n}\n"
    },
    "contracts/MultiSigContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nerror MultiSig__OnlyOwner();\nerror MultiSig__CtorNotEnoughOwners();\nerror MultiSig__CtorTooManyOwners();\nerror MultiSig__OwnerInvalidAddress();\nerror MultiSig__CtorListOfOwnersHasDuplicatedAddresses();\nerror MultiSig__TxAlreadyExecuted();\nerror MultiSig__TxDoesNotExist();\nerror MultiSig__TxAlreadyConfirmed();\nerror MultiSig__TxCannotExecute();\nerror MultiSig__TxExecuteFailed();\nerror MultiSig__TxAlreadySubmitted();\nerror MultiSig__AddOwnerFailed();\nerror MultiSig__RemoveOwnerFailed();\n\n/** @title A multisignature wallet contract\n *  @author Brice Grenard\n *  @notice This contract is a mutlisig wallet that is being used for the marketplace contract I have been working on.\n *  It allows any contract's owner to make a proposal. Anyone including the proposal's author is welcomed to confirm it.\n *  If a proposal has gained enough confirmation, the transaction can be executed.\n */\ncontract MultiSig {\n    using SafeMath for uint256;\n\n    /* events */\n    event TxSubmitted(\n        address indexed owner,\n        uint256 indexed nonce,\n        address indexed to,\n        uint256 value,\n        bytes data\n    );\n    event TxConfirmed(\n        address indexed owner,\n        address indexed txOriginOwner,\n        uint256 indexed nonce\n    );\n    event TxExecuted(\n        address indexed owner,\n        address indexed txOriginOwner,\n        uint indexed nonce\n    );\n    event MultiSigOwnerAdded(address indexed owner, uint256 indexed timestamp);\n    event MultiSigOwnerRemoved(\n        address indexed owner,\n        uint256 indexed timestamp\n    );\n\n    uint8 immutable i_minimumOwnersCount = 3;\n    uint8 immutable i_maximumOwnersCount = 20;\n    //80% of owners required to approve a transaction, in this contract approve fct is executeTx()\n    uint8 immutable i_percentageOwnersRequiredForApproval = 80;\n\n    //array of owner addresses stored in contract\n    address[] private s_owners;\n    //mapping that allows to track if an address is a owner\n    mapping(address => bool) private s_isOwner;\n    //for a given transaction nonce, returns the transaction object associated\n    mapping(uint256 => Tx) private s_transactions;\n    //for a given transaction nonce, track if a owner address has confirmed a transaction\n    mapping(uint256 => mapping(address => bool)) hasConfirmed;\n    //calculated number of owners required to execute a transaction\n    uint256 private s_nbOwnerConfirmationsRequiredForApproval;\n\n    //A transaction object\n    struct Tx {\n        address from;\n        address to;\n        uint256 nonce;\n        uint256 value;\n        bytes data;\n        bool executed;\n        uint8 nbOwnerConfirmationsProcessed;\n    }\n\n    // Modifier\n    /**\n     * Prevents any single owner to interact with the here-below functions decorated with this modifier\n     * It is used in addOwner and removeOwner functions\n     * The goal is to force proposal on adding/removing a user using this multisig wallet\n     */\n    modifier onlyThisWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    // Modifier\n    /**\n     * Allows only owners registered into this contract to use functions decorated with this modifier\n     */\n    modifier onlyOwner() {\n        if (!s_isOwner[msg.sender]) revert MultiSig__OnlyOwner();\n        _;\n    }\n\n    // Modifier\n    /**\n     * Prevents the confirmation of a non-existing transaction\n     */\n    modifier txExists(uint256 nonce) {\n        if (s_transactions[nonce].to == address(0))\n            revert MultiSig__TxDoesNotExist();\n        _;\n    }\n\n    // Modifier\n    /**\n     * Prevents the execution of a transaction that has already been executed\n     */\n    modifier txNotExecuted(uint256 nonce) {\n        if (s_transactions[nonce].executed)\n            revert MultiSig__TxAlreadyExecuted();\n        _;\n    }\n\n    // Modifier\n    /**\n     * Prevents the execution of a transaction that has already been confirmed\n     */\n    modifier txNotConfirmed(uint256 nonce) {\n        if (hasConfirmed[nonce][msg.sender])\n            revert MultiSig__TxAlreadyConfirmed();\n        _;\n    }\n\n    // Constructor\n    /**\n     * Initializes the contract with a pre-defined list of owners\n     * Calculate the number of owners required to execute a transaction\n     */\n    constructor(address[] memory listOfOwners) {\n        if (listOfOwners.length < i_minimumOwnersCount)\n            revert MultiSig__CtorNotEnoughOwners();\n        if (listOfOwners.length > i_maximumOwnersCount)\n            revert MultiSig__CtorTooManyOwners();\n\n        for (uint8 i = 0; i < listOfOwners.length; i++) {\n            address owner = listOfOwners[i];\n            if (owner == address(0)) revert MultiSig__OwnerInvalidAddress();\n            if (s_isOwner[owner])\n                revert MultiSig__CtorListOfOwnersHasDuplicatedAddresses();\n            s_isOwner[owner] = true;\n        }\n        s_owners = listOfOwners;\n        s_nbOwnerConfirmationsRequiredForApproval = calculateNumberOfOwnersRequiredForApproval();\n    }\n\n    /**\n     * Submits a proposal (transaction)\n     * The proposal is for this use case a contract function call passed into the _data parameter\n     * I may later use the value for funds withdrawal proposal\n     */\n    function submitTx(\n        address _to,\n        uint256 _nonce,\n        uint256 _value,\n        bytes calldata _data\n    ) external onlyOwner {\n        //only one submission per nonce value\n        if (s_transactions[_nonce].to != address(0))\n            revert MultiSig__TxAlreadySubmitted();\n\n        s_transactions[_nonce] = Tx({\n            from: msg.sender,\n            to: _to,\n            nonce: _nonce,\n            value: _value,\n            data: _data,\n            executed: false,\n            nbOwnerConfirmationsProcessed: 0\n        });\n        emit TxSubmitted(msg.sender, _nonce, _to, _value, _data);\n    }\n\n    /**\n     * Confirms a proposal (transaction)\n     * Every owner stored in this contract may confirm the proposal\n     */\n    function confirmTx(uint256 _nonce)\n        external\n        onlyOwner\n        txExists(_nonce)\n        txNotExecuted(_nonce)\n        txNotConfirmed(_nonce)\n    {\n        Tx storage transaction = s_transactions[_nonce];\n        transaction.nbOwnerConfirmationsProcessed += 1;\n        hasConfirmed[_nonce][msg.sender] = true;\n\n        emit TxConfirmed(msg.sender, transaction.from, _nonce);\n    }\n\n    /**\n     * Executes a proposal (transaction) if enough owners confirmed it.\n     * Any owner stored in this contract may confirm the proposal, even if one has not confirmed it.\n     */\n    function executeTx(uint256 _nonce)\n        external\n        onlyOwner\n        txExists(_nonce)\n        txNotExecuted(_nonce)\n    {\n        uint256 numberOfApprovalsNeeded = calculateNumberOfOwnersRequiredForApproval();\n        Tx storage transaction = s_transactions[_nonce];\n        if (transaction.nbOwnerConfirmationsProcessed < numberOfApprovalsNeeded)\n            revert MultiSig__TxCannotExecute();\n        transaction.executed = true;\n        (bool success, ) = transaction.to.call{value: transaction.value}(\n            transaction.data\n        );\n        if (!success) revert MultiSig__TxExecuteFailed();\n        emit TxExecuted(msg.sender, transaction.from, _nonce);\n    }\n\n    /**\n     * Adds a new owner to this contract.\n     * A single owner from this contract cannot add a new owner, he/her must send a proposal.\n     */\n    function addOwner(address newOwner) external onlyThisWallet {\n        if (newOwner == address(0)) revert MultiSig__OwnerInvalidAddress();\n        if (s_owners.length == i_maximumOwnersCount)\n            revert MultiSig__AddOwnerFailed();\n        if (s_isOwner[newOwner]) revert MultiSig__AddOwnerFailed();\n\n        s_owners.push(newOwner);\n        s_isOwner[newOwner] = true;\n\n        //update number of approvals needed for executing a transaction\n        s_nbOwnerConfirmationsRequiredForApproval = calculateNumberOfOwnersRequiredForApproval();\n\n        emit MultiSigOwnerAdded(newOwner, block.timestamp);\n    }\n\n    /**\n     * Removes an exising owner from this contract.\n     * A single owner from this contract cannot remove an existing owner, he/her must send a proposal.\n     */\n    function removeOwner(address owner) external onlyThisWallet {\n        if (owner == address(0)) revert MultiSig__OwnerInvalidAddress();\n        if (s_owners.length == i_minimumOwnersCount)\n            revert MultiSig__RemoveOwnerFailed();\n\n        uint256 index = ownersArrayIndexOf(owner);\n        ownersArrayRemoveAtIndex(index);\n        s_isOwner[owner] = false;\n\n        //update number of approvals needed for executing a transaction\n        s_nbOwnerConfirmationsRequiredForApproval = calculateNumberOfOwnersRequiredForApproval();\n\n        emit MultiSigOwnerRemoved(owner, block.timestamp);\n    }\n\n    /**\n     * Get immutable percentage variable of owners required for a transaction execution.\n     */\n    function getPercentageOfOwnersRequiredForApproval()\n        external\n        pure\n        returns (uint8 nbOwnersRequired)\n    {\n        nbOwnersRequired = i_percentageOwnersRequiredForApproval;\n    }\n\n    /**\n     * Retrieves the number of owners required for a transaction execution.\n     */\n    function getNumberOfOwnersRequiredForApproval()\n        external\n        view\n        returns (uint256 nbOwnersRequired)\n    {\n        nbOwnersRequired = s_nbOwnerConfirmationsRequiredForApproval;\n    }\n\n    /**\n     * Calculates the number of owners required for a transaction execution.\n     */\n    function calculateNumberOfOwnersRequiredForApproval()\n        private\n        view\n        returns (uint256 nbOwnersRequired)\n    {\n        nbOwnersRequired = s_owners\n            .length\n            .mul(i_percentageOwnersRequiredForApproval)\n            .div(100);\n    }\n\n    /**\n     * Returns a list of all owners stored in this contract.\n     */\n    function getOwnersAddresses() external view returns (address[] memory) {\n        return s_owners;\n    }\n\n    /**\n     * Returns the index of a given address in the owners array\n     */\n    function ownersArrayIndexOf(address value) private view returns (uint256) {\n        uint i = 0;\n        while (s_owners[i] != value) {\n            i++;\n        }\n        return i;\n    }\n\n    /**\n     * Removes a value from the owners array\n     */\n    function ownersArrayRemoveAtIndex(uint _index) private {\n        require(_index < s_owners.length, \"index out of bound\");\n\n        for (uint i = _index; i < s_owners.length - 1; i++) {\n            s_owners[i] = s_owners[i + 1];\n        }\n        s_owners.pop();\n    }\n\n    /**\n     * Gets a transaction object for a given nonce\n     */\n    function getTransaction(uint256 nonce) external view returns (Tx memory) {\n        return s_transactions[nonce];\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}