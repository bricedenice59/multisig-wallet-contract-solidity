{
  "address": "0x952694E44E5d5c17C0A89e98A20A48c57092e6F4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "listOfOwners",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MultiSig__AddOwnerFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__CtorListOfOwnersHasDuplicatedAddresses",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__CtorNotEnoughOwners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__CtorTooManyOwners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__OwnerInvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__RemoveOwnerFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__TxAlreadyConfirmed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__TxAlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__TxAlreadySubmitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__TxCannotExecute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__TxDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig__TxExecuteFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MultiSigOwnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MultiSigOwnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "txOriginOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "TxConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "txOriginOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "TxExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TxSubmitted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "confirmTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "executeTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfOwnersRequiredForApproval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nbOwnersRequired",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnersAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPercentageOfOwnersRequiredForApproval",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "nbOwnersRequired",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "getTransaction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "nbOwnerConfirmationsProcessed",
              "type": "uint8"
            }
          ],
          "internalType": "struct MultiSig.Tx",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "submitTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xee489343bb16b125a8151db3cfceae0ed35f703a758e58c70db6bd1a1ecfba20",
  "receipt": {
    "to": null,
    "from": "0x06Cfb38C30775505C934A1bA364bfFEDfbFAfE37",
    "contractAddress": "0x952694E44E5d5c17C0A89e98A20A48c57092e6F4",
    "transactionIndex": 18,
    "gasUsed": "1986640",
    "logsBloom": "0x
    "blockHash": "0xcf831c5e706d080c7a522e7dd7ca8fed13aa7db0242472175947a0b91994a3ad",
    "transactionHash": "0xee489343bb16b125a8151db3cfceae0ed35f703a758e58c70db6bd1a1ecfba20",
    "logs": [],
    "blockNumber": 11263253,
    "cumulativeGasUsed": "14349553",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xd60504758e413Aaf9d4F44bEBF1d7F0669fb0622",
      "0xc85D72a0A168b33D30D1140dD5d220AF5652617D",
      "0x86434A3079a635C17fEA61A8F1a070DAD73d3B01"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "3b87d17dcdb8116dffd920d637337917",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"listOfOwners\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MultiSig__AddOwnerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__CtorListOfOwnersHasDuplicatedAddresses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__CtorNotEnoughOwners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__CtorTooManyOwners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__OwnerInvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__RemoveOwnerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__TxAlreadyConfirmed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__TxAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__TxAlreadySubmitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__TxCannotExecute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__TxDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig__TxExecuteFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MultiSigOwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MultiSigOwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txOriginOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"TxConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txOriginOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"TxExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TxSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"confirmTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"executeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfOwnersRequiredForApproval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nbOwnersRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnersAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentageOfOwnersRequiredForApproval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"nbOwnersRequired\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"nbOwnerConfirmationsProcessed\",\"type\":\"uint8\"}],\"internalType\":\"struct MultiSig.Tx\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Brice Grenard\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A multisignature wallet contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOwner(address)\":{\"notice\":\"Adds a new owner to this contract. A single owner from this contract cannot add a new owner, he/her must send a proposal.\"},\"confirmTx(uint256)\":{\"notice\":\"Confirms a proposal (transaction) Every owner stored in this contract may confirm the proposal\"},\"constructor\":{\"notice\":\"Initializes the contract with a pre-defined list of owners Calculate the number of owners required to execute a transaction\"},\"executeTx(uint256)\":{\"notice\":\"Executes a proposal (transaction) if enough owners confirmed it. Any owner stored in this contract may confirm the proposal, even if one has not confirmed it.\"},\"getNumberOfOwnersRequiredForApproval()\":{\"notice\":\"Retrieves the number of owners required for a transaction execution.\"},\"getOwnersAddresses()\":{\"notice\":\"Returns a list of all owners stored in this contract.\"},\"getPercentageOfOwnersRequiredForApproval()\":{\"notice\":\"Get immutable percentage variable of owners required for a transaction execution.\"},\"getTransaction(uint256)\":{\"notice\":\"Gets a transaction object for a given nonce\"},\"removeOwner(address)\":{\"notice\":\"Removes an exising owner from this contract. A single owner from this contract cannot remove an existing owner, he/her must send a proposal.\"},\"submitTx(address,uint256,uint256,bytes)\":{\"notice\":\"Submits a proposal (transaction) The proposal is for this use case a contract function call passed into the _data parameter I may later use the value for funds withdrawal proposal\"}},\"notice\":\"This contract is a mutlisig wallet that is being used for the marketplace contract I have been working on.  It allows any contract's owner to make a proposal. Anyone including the proposal's author is welcomed to confirm it.  If a proposal has gained enough confirmation, the transaction can be executed.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiSigContract.sol\":\"MultiSig\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/MultiSigContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nerror MultiSig__OnlyOwner();\\nerror MultiSig__CtorNotEnoughOwners();\\nerror MultiSig__CtorTooManyOwners();\\nerror MultiSig__OwnerInvalidAddress();\\nerror MultiSig__CtorListOfOwnersHasDuplicatedAddresses();\\nerror MultiSig__TxAlreadyExecuted();\\nerror MultiSig__TxDoesNotExist();\\nerror MultiSig__TxAlreadyConfirmed();\\nerror MultiSig__TxCannotExecute();\\nerror MultiSig__TxExecuteFailed();\\nerror MultiSig__TxAlreadySubmitted();\\nerror MultiSig__AddOwnerFailed();\\nerror MultiSig__RemoveOwnerFailed();\\n\\n/** @title A multisignature wallet contract\\n *  @author Brice Grenard\\n *  @notice This contract is a mutlisig wallet that is being used for the marketplace contract I have been working on.\\n *  It allows any contract's owner to make a proposal. Anyone including the proposal's author is welcomed to confirm it.\\n *  If a proposal has gained enough confirmation, the transaction can be executed.\\n */\\ncontract MultiSig {\\n    using SafeMath for uint256;\\n\\n    /* events */\\n    event TxSubmitted(\\n        address indexed owner,\\n        uint256 indexed nonce,\\n        address indexed to,\\n        uint256 value,\\n        bytes data\\n    );\\n    event TxConfirmed(\\n        address indexed owner,\\n        address indexed txOriginOwner,\\n        uint256 indexed nonce\\n    );\\n    event TxExecuted(\\n        address indexed owner,\\n        address indexed txOriginOwner,\\n        uint indexed nonce\\n    );\\n    event MultiSigOwnerAdded(address indexed owner, uint256 indexed timestamp);\\n    event MultiSigOwnerRemoved(\\n        address indexed owner,\\n        uint256 indexed timestamp\\n    );\\n\\n    uint8 immutable i_minimumOwnersCount = 3;\\n    uint8 immutable i_maximumOwnersCount = 20;\\n    //80% of owners required to approve a transaction, in this contract approve fct is executeTx()\\n    uint8 immutable i_percentageOwnersRequiredForApproval = 80;\\n\\n    //array of owner addresses stored in contract\\n    address[] private s_owners;\\n    //mapping that allows to track if an address is a owner\\n    mapping(address => bool) private s_isOwner;\\n    //for a given transaction nonce, returns the transaction object associated\\n    mapping(uint256 => Tx) private s_transactions;\\n    //for a given transaction nonce, track if a owner address has confirmed a transaction\\n    mapping(uint256 => mapping(address => bool)) hasConfirmed;\\n    //calculated number of owners required to execute a transaction\\n    uint256 private s_nbOwnerConfirmationsRequiredForApproval;\\n\\n    //A transaction object\\n    struct Tx {\\n        address from;\\n        address to;\\n        uint256 nonce;\\n        uint256 value;\\n        bytes data;\\n        bool executed;\\n        uint8 nbOwnerConfirmationsProcessed;\\n    }\\n\\n    // Modifier\\n    /**\\n     * Prevents any single owner to interact with the here-below functions decorated with this modifier\\n     * It is used in addOwner and removeOwner functions\\n     * The goal is to force proposal on adding/removing a user using this multisig wallet\\n     */\\n    modifier onlyThisWallet() {\\n        require(msg.sender == address(this));\\n        _;\\n    }\\n\\n    // Modifier\\n    /**\\n     * Allows only owners registered into this contract to use functions decorated with this modifier\\n     */\\n    modifier onlyOwner() {\\n        if (!s_isOwner[msg.sender]) revert MultiSig__OnlyOwner();\\n        _;\\n    }\\n\\n    // Modifier\\n    /**\\n     * Prevents the confirmation of a non-existing transaction\\n     */\\n    modifier txExists(uint256 nonce) {\\n        if (s_transactions[nonce].to == address(0))\\n            revert MultiSig__TxDoesNotExist();\\n        _;\\n    }\\n\\n    // Modifier\\n    /**\\n     * Prevents the execution of a transaction that has already been executed\\n     */\\n    modifier txNotExecuted(uint256 nonce) {\\n        if (s_transactions[nonce].executed)\\n            revert MultiSig__TxAlreadyExecuted();\\n        _;\\n    }\\n\\n    // Modifier\\n    /**\\n     * Prevents the execution of a transaction that has already been confirmed\\n     */\\n    modifier txNotConfirmed(uint256 nonce) {\\n        if (hasConfirmed[nonce][msg.sender])\\n            revert MultiSig__TxAlreadyConfirmed();\\n        _;\\n    }\\n\\n    // Constructor\\n    /**\\n     * Initializes the contract with a pre-defined list of owners\\n     * Calculate the number of owners required to execute a transaction\\n     */\\n    constructor(address[] memory listOfOwners) {\\n        if (listOfOwners.length < i_minimumOwnersCount)\\n            revert MultiSig__CtorNotEnoughOwners();\\n        if (listOfOwners.length > i_maximumOwnersCount)\\n            revert MultiSig__CtorTooManyOwners();\\n\\n        for (uint8 i = 0; i < listOfOwners.length; i++) {\\n            address owner = listOfOwners[i];\\n            if (owner == address(0)) revert MultiSig__OwnerInvalidAddress();\\n            if (s_isOwner[owner])\\n                revert MultiSig__CtorListOfOwnersHasDuplicatedAddresses();\\n            s_isOwner[owner] = true;\\n        }\\n        s_owners = listOfOwners;\\n        s_nbOwnerConfirmationsRequiredForApproval = calculateNumberOfOwnersRequiredForApproval();\\n    }\\n\\n    /**\\n     * Submits a proposal (transaction)\\n     * The proposal is for this use case a contract function call passed into the _data parameter\\n     * I may later use the value for funds withdrawal proposal\\n     */\\n    function submitTx(\\n        address _to,\\n        uint256 _nonce,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyOwner {\\n        //only one submission per nonce value\\n        if (s_transactions[_nonce].to != address(0))\\n            revert MultiSig__TxAlreadySubmitted();\\n\\n        s_transactions[_nonce] = Tx({\\n            from: msg.sender,\\n            to: _to,\\n            nonce: _nonce,\\n            value: _value,\\n            data: _data,\\n            executed: false,\\n            nbOwnerConfirmationsProcessed: 0\\n        });\\n        emit TxSubmitted(msg.sender, _nonce, _to, _value, _data);\\n    }\\n\\n    /**\\n     * Confirms a proposal (transaction)\\n     * Every owner stored in this contract may confirm the proposal\\n     */\\n    function confirmTx(uint256 _nonce)\\n        external\\n        onlyOwner\\n        txExists(_nonce)\\n        txNotExecuted(_nonce)\\n        txNotConfirmed(_nonce)\\n    {\\n        Tx storage transaction = s_transactions[_nonce];\\n        transaction.nbOwnerConfirmationsProcessed += 1;\\n        hasConfirmed[_nonce][msg.sender] = true;\\n\\n        emit TxConfirmed(msg.sender, transaction.from, _nonce);\\n    }\\n\\n    /**\\n     * Executes a proposal (transaction) if enough owners confirmed it.\\n     * Any owner stored in this contract may confirm the proposal, even if one has not confirmed it.\\n     */\\n    function executeTx(uint256 _nonce)\\n        external\\n        onlyOwner\\n        txExists(_nonce)\\n        txNotExecuted(_nonce)\\n    {\\n        uint256 numberOfApprovalsNeeded = calculateNumberOfOwnersRequiredForApproval();\\n        Tx storage transaction = s_transactions[_nonce];\\n        if (transaction.nbOwnerConfirmationsProcessed < numberOfApprovalsNeeded)\\n            revert MultiSig__TxCannotExecute();\\n        transaction.executed = true;\\n        (bool success, ) = transaction.to.call{value: transaction.value}(\\n            transaction.data\\n        );\\n        if (!success) revert MultiSig__TxExecuteFailed();\\n        emit TxExecuted(msg.sender, transaction.from, _nonce);\\n    }\\n\\n    /**\\n     * Adds a new owner to this contract.\\n     * A single owner from this contract cannot add a new owner, he/her must send a proposal.\\n     */\\n    function addOwner(address newOwner) external onlyThisWallet {\\n        if (newOwner == address(0)) revert MultiSig__OwnerInvalidAddress();\\n        if (s_owners.length == i_maximumOwnersCount)\\n            revert MultiSig__AddOwnerFailed();\\n        if (s_isOwner[newOwner]) revert MultiSig__AddOwnerFailed();\\n\\n        s_owners.push(newOwner);\\n        s_isOwner[newOwner] = true;\\n\\n        //update number of approvals needed for executing a transaction\\n        s_nbOwnerConfirmationsRequiredForApproval = calculateNumberOfOwnersRequiredForApproval();\\n\\n        emit MultiSigOwnerAdded(newOwner, block.timestamp);\\n    }\\n\\n    /**\\n     * Removes an exising owner from this contract.\\n     * A single owner from this contract cannot remove an existing owner, he/her must send a proposal.\\n     */\\n    function removeOwner(address owner) external onlyThisWallet {\\n        if (owner == address(0)) revert MultiSig__OwnerInvalidAddress();\\n        if (s_owners.length == i_minimumOwnersCount)\\n            revert MultiSig__RemoveOwnerFailed();\\n\\n        uint256 index = ownersArrayIndexOf(owner);\\n        ownersArrayRemoveAtIndex(index);\\n        s_isOwner[owner] = false;\\n\\n        //update number of approvals needed for executing a transaction\\n        s_nbOwnerConfirmationsRequiredForApproval = calculateNumberOfOwnersRequiredForApproval();\\n\\n        emit MultiSigOwnerRemoved(owner, block.timestamp);\\n    }\\n\\n    /**\\n     * Get immutable percentage variable of owners required for a transaction execution.\\n     */\\n    function getPercentageOfOwnersRequiredForApproval()\\n        external\\n        pure\\n        returns (uint8 nbOwnersRequired)\\n    {\\n        nbOwnersRequired = i_percentageOwnersRequiredForApproval;\\n    }\\n\\n    /**\\n     * Retrieves the number of owners required for a transaction execution.\\n     */\\n    function getNumberOfOwnersRequiredForApproval()\\n        external\\n        view\\n        returns (uint256 nbOwnersRequired)\\n    {\\n        nbOwnersRequired = s_nbOwnerConfirmationsRequiredForApproval;\\n    }\\n\\n    /**\\n     * Calculates the number of owners required for a transaction execution.\\n     */\\n    function calculateNumberOfOwnersRequiredForApproval()\\n        private\\n        view\\n        returns (uint256 nbOwnersRequired)\\n    {\\n        nbOwnersRequired = s_owners\\n            .length\\n            .mul(i_percentageOwnersRequiredForApproval)\\n            .div(100);\\n    }\\n\\n    /**\\n     * Returns a list of all owners stored in this contract.\\n     */\\n    function getOwnersAddresses() external view returns (address[] memory) {\\n        return s_owners;\\n    }\\n\\n    /**\\n     * Returns the index of a given address in the owners array\\n     */\\n    function ownersArrayIndexOf(address value) private view returns (uint256) {\\n        uint i = 0;\\n        while (s_owners[i] != value) {\\n            i++;\\n        }\\n        return i;\\n    }\\n\\n    /**\\n     * Removes a value from the owners array\\n     */\\n    function ownersArrayRemoveAtIndex(uint _index) private {\\n        require(_index < s_owners.length, \\\"index out of bound\\\");\\n\\n        for (uint i = _index; i < s_owners.length - 1; i++) {\\n            s_owners[i] = s_owners[i + 1];\\n        }\\n        s_owners.pop();\\n    }\\n\\n    /**\\n     * Gets a transaction object for a given nonce\\n     */\\n    function getTransaction(uint256 nonce) external view returns (Tx memory) {\\n        return s_transactions[nonce];\\n    }\\n}\\n\",\"keccak256\":\"0x8180178d85ee43d1db5d1dbb18005ed6ddac936ba2adbc5f28f65480d4dd155a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600360ff1660809060ff16815250601460ff1660a09060ff16815250605060ff1660c09060ff168152503480156200003b57600080fd5b5060405162002709380380620027098339818101604052810190620000619190620005ba565b60805160ff1681511015620000a2576040517f8ce47a9a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a05160ff1681511115620000e3576040517f93ffedb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81518160ff16101562000272576000828260ff16815181106200010e576200010d6200060b565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200017f576040517f335cfc6500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161562000204576040517fb9df96ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550508080620002699062000676565b915050620000e6565b5080600090805190602001906200028b9291906200031e565b506200029c620002a960201b60201c565b6004819055505062000776565b6000620002e96064620002d560c05160ff16600080549050620002ee60201b6200127c1790919060201c565b6200030660201b620012921790919060201c565b905090565b60008183620002fe9190620006ae565b905092915050565b600081836200031691906200073e565b905092915050565b8280548282559060005260206000209081019282156200039a579160200282015b82811115620003995782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906200033f565b5b509050620003a99190620003ad565b5090565b5b80821115620003c8576000816000905550600101620003ae565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200043082620003e5565b810181811067ffffffffffffffff82111715620004525762000451620003f6565b5b80604052505050565b600062000467620003cc565b905062000475828262000425565b919050565b600067ffffffffffffffff821115620004985762000497620003f6565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004db82620004ae565b9050919050565b620004ed81620004ce565b8114620004f957600080fd5b50565b6000815190506200050d81620004e2565b92915050565b60006200052a62000524846200047a565b6200045b565b9050808382526020820190506020840283018581111562000550576200054f620004a9565b5b835b818110156200057d5780620005688882620004fc565b84526020840193505060208101905062000552565b5050509392505050565b600082601f8301126200059f576200059e620003e0565b5b8151620005b184826020860162000513565b91505092915050565b600060208284031215620005d357620005d2620003d6565b5b600082015167ffffffffffffffff811115620005f457620005f3620003db565b5b620006028482850162000587565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b6000620006838262000669565b915060ff82036200069957620006986200063a565b5b600182019050919050565b6000819050919050565b6000620006bb82620006a4565b9150620006c883620006a4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200070457620007036200063a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200074b82620006a4565b91506200075883620006a4565b9250826200076b576200076a6200070f565b5b828204905092915050565b60805160a05160c051611f5c620007ad600039600081816105c401526114b4015260006109e9015260006102e60152611f5c6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80633ce5c1d7116100665780633ce5c1d71461012057806354b5fe801461013e5780637065cb481461015a578063801be06014610176578063fc8bb2e21461019257610093565b8063079f4f46146100985780630cb6eec1146100b6578063173825d9146100d457806333ea3dc8146100f0575b600080fd5b6100a06101ae565b6040516100ad91906116fe565b60405180910390f35b6100be61023c565b6040516100cb9190611739565b60405180910390f35b6100ee60048036038101906100e9919061178a565b610246565b005b61010a600480360381019061010591906117e3565b610409565b604051610117919061198b565b60405180910390f35b6101286105c0565b60405161013591906119bc565b60405180910390f35b610158600480360381019061015391906117e3565b6105e8565b005b610174600480360381019061016f919061178a565b610949565b005b610190600480360381019061018b91906117e3565b610bdb565b005b6101ac60048036038101906101a79190611a3c565b610f2c565b005b6060600080548060200260200160405190810160405280929190818152602001828054801561023257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101e8575b5050505050905090565b6000600454905090565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461027e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102e4576040517f335cfc6500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060ff1660008054905003610345576040517f5cd163e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610350826112a8565b905061035b8161133d565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506103bb6114a8565b600481905550428273ffffffffffffffffffffffffffffffffffffffff167f12c060be1309a41e7be0154780b971638d45a077d3e09a5a7758d0068650fc6c60405160405180910390a35050565b6104116114fd565b600260008381526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820180546104ff90611af3565b80601f016020809104026020016040519081016040528092919081815260200182805461052b90611af3565b80156105785780601f1061054d57610100808354040283529160200191610578565b820191906000526020600020905b81548152906001019060200180831161055b57829003601f168201915b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff1660ff1660ff16815250509050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661066b576040517f4523e4c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610708576040517f5535eea400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816002600082815260200190815260200160002060050160009054906101000a900460ff1615610764576040517fb8f9e93600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061076e6114a8565b90506000600260008681526020019081526020016000209050818160050160019054906101000a900460ff1660ff1610156107d5576040517f10c57ccc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018160050160006101000a81548160ff02191690831515021790555060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260030154836004016040516108459190611bc3565b60006040518083038185875af1925050503d8060008114610882576040519150601f19603f3d011682016040523d82523d6000602084013e610887565b606091505b50509050806108c2576040517fb080763500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5c6fc8f8bbcdb3d536e82b833fc64b9280c32b5acd300c029dd9e0aa655bc10360405160405180910390a4505050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461098157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109e7576040517f335cfc6500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060ff1660008054905003610a48576040517f2d3ca68000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610acc576040517f2d3ca68000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b8e6114a8565b600481905550428173ffffffffffffffffffffffffffffffffffffffff167fbf46a52f595053b529700b1ddfd1c7a47d0ae13fdfa123dc62e981694beee63860405160405180910390a350565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c5e576040517f4523e4c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610cfb576040517f5535eea400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816002600082815260200190815260200160002060050160009054906101000a900460ff1615610d57576040517fb8f9e93600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826003600082815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610ded576040517fcd8e608b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060026000868152602001908152602001600020905060018160050160018282829054906101000a900460ff16610e259190611c09565b92506101000a81548160ff021916908360ff16021790555060016003600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550848160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f25b700fc4bed8e5c17e94535355b51698d9793fe30e49e82584858a71ec0d50a60405160405180910390a45050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610faf576040517f4523e4c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461104b576040517f6156f55500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001600015158152602001600060ff168152506002600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040190805190602001906111c692919061156b565b5060a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff021916908360ff1602179055509050508473ffffffffffffffffffffffffffffffffffffffff16843373ffffffffffffffffffffffffffffffffffffffff167f990f3d9ffe92875b8e71fd83ecbd0edab1fd9249dec4b5f775c9343f1b80028486868660405161126d93929190611c8d565b60405180910390a45050505050565b6000818361128a9190611cbf565b905092915050565b600081836112a09190611d48565b905092915050565b600080600090505b8273ffffffffffffffffffffffffffffffffffffffff16600082815481106112db576112da611d79565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461133457808061132c90611da8565b9150506112b0565b80915050919050565b6000805490508110611384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137b90611e4d565b60405180910390fd5b60008190505b600160008054905061139c9190611e6d565b81101561145d5760006001826113b29190611ea1565b815481106113c3576113c2611d79565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000828154811061140257611401611d79565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061145590611da8565b91505061138a565b5060008054806114705761146f611ef7565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550565b60006114f860646114ea7f000000000000000000000000000000000000000000000000000000000000000060ff1660008054905061127c90919063ffffffff16565b61129290919063ffffffff16565b905090565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160608152602001600015158152602001600060ff1681525090565b82805461157790611af3565b90600052602060002090601f01602090048101928261159957600085556115e0565b82601f106115b257805160ff19168380011785556115e0565b828001600101855582156115e0579182015b828111156115df5782518255916020019190600101906115c4565b5b5090506115ed91906115f1565b5090565b5b8082111561160a5760008160009055506001016115f2565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116658261163a565b9050919050565b6116758161165a565b82525050565b6000611687838361166c565b60208301905092915050565b6000602082019050919050565b60006116ab8261160e565b6116b58185611619565b93506116c08361162a565b8060005b838110156116f15781516116d8888261167b565b97506116e383611693565b9250506001810190506116c4565b5085935050505092915050565b6000602082019050818103600083015261171881846116a0565b905092915050565b6000819050919050565b61173381611720565b82525050565b600060208201905061174e600083018461172a565b92915050565b600080fd5b600080fd5b6117678161165a565b811461177257600080fd5b50565b6000813590506117848161175e565b92915050565b6000602082840312156117a05761179f611754565b5b60006117ae84828501611775565b91505092915050565b6117c081611720565b81146117cb57600080fd5b50565b6000813590506117dd816117b7565b92915050565b6000602082840312156117f9576117f8611754565b5b6000611807848285016117ce565b91505092915050565b61181981611720565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561185957808201518184015260208101905061183e565b83811115611868576000848401525b50505050565b6000601f19601f8301169050919050565b600061188a8261181f565b611894818561182a565b93506118a481856020860161183b565b6118ad8161186e565b840191505092915050565b60008115159050919050565b6118cd816118b8565b82525050565b600060ff82169050919050565b6118e9816118d3565b82525050565b600060e083016000830151611907600086018261166c565b50602083015161191a602086018261166c565b50604083015161192d6040860182611810565b5060608301516119406060860182611810565b5060808301518482036080860152611958828261187f565b91505060a083015161196d60a08601826118c4565b5060c083015161198060c08601826118e0565b508091505092915050565b600060208201905081810360008301526119a581846118ef565b905092915050565b6119b6816118d3565b82525050565b60006020820190506119d160008301846119ad565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126119fc576119fb6119d7565b5b8235905067ffffffffffffffff811115611a1957611a186119dc565b5b602083019150836001820283011115611a3557611a346119e1565b5b9250929050565b600080600080600060808688031215611a5857611a57611754565b5b6000611a6688828901611775565b9550506020611a77888289016117ce565b9450506040611a88888289016117ce565b935050606086013567ffffffffffffffff811115611aa957611aa8611759565b5b611ab5888289016119e6565b92509250509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b0b57607f821691505b602082108103611b1e57611b1d611ac4565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154611b5181611af3565b611b5b8186611b24565b94506001821660008114611b765760018114611b8757611bba565b60ff19831686528186019350611bba565b611b9085611b2f565b60005b83811015611bb257815481890152600182019150602081019050611b93565b838801955050505b50505092915050565b6000611bcf8284611b44565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c14826118d3565b9150611c1f836118d3565b92508260ff03821115611c3557611c34611bda565b5b828201905092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000611c6c8385611c40565b9350611c79838584611c51565b611c828361186e565b840190509392505050565b6000604082019050611ca2600083018661172a565b8181036020830152611cb5818486611c60565b9050949350505050565b6000611cca82611720565b9150611cd583611720565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611d0e57611d0d611bda565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d5382611720565b9150611d5e83611720565b925082611d6e57611d6d611d19565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611db382611720565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611de557611de4611bda565b5b600182019050919050565b600082825260208201905092915050565b7f696e646578206f7574206f6620626f756e640000000000000000000000000000600082015250565b6000611e37601283611df0565b9150611e4282611e01565b602082019050919050565b60006020820190508181036000830152611e6681611e2a565b9050919050565b6000611e7882611720565b9150611e8383611720565b925082821015611e9657611e95611bda565b5b828203905092915050565b6000611eac82611720565b9150611eb783611720565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611eec57611eeb611bda565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212200413f75a76816d366029ac8626f1f747bf1f475913da031b092815f51c9ace2664736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80633ce5c1d7116100665780633ce5c1d71461012057806354b5fe801461013e5780637065cb481461015a578063801be06014610176578063fc8bb2e21461019257610093565b8063079f4f46146100985780630cb6eec1146100b6578063173825d9146100d457806333ea3dc8146100f0575b600080fd5b6100a06101ae565b6040516100ad91906116fe565b60405180910390f35b6100be61023c565b6040516100cb9190611739565b60405180910390f35b6100ee60048036038101906100e9919061178a565b610246565b005b61010a600480360381019061010591906117e3565b610409565b604051610117919061198b565b60405180910390f35b6101286105c0565b60405161013591906119bc565b60405180910390f35b610158600480360381019061015391906117e3565b6105e8565b005b610174600480360381019061016f919061178a565b610949565b005b610190600480360381019061018b91906117e3565b610bdb565b005b6101ac60048036038101906101a79190611a3c565b610f2c565b005b6060600080548060200260200160405190810160405280929190818152602001828054801561023257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101e8575b5050505050905090565b6000600454905090565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461027e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102e4576040517f335cfc6500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060ff1660008054905003610345576040517f5cd163e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610350826112a8565b905061035b8161133d565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506103bb6114a8565b600481905550428273ffffffffffffffffffffffffffffffffffffffff167f12c060be1309a41e7be0154780b971638d45a077d3e09a5a7758d0068650fc6c60405160405180910390a35050565b6104116114fd565b600260008381526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820180546104ff90611af3565b80601f016020809104026020016040519081016040528092919081815260200182805461052b90611af3565b80156105785780601f1061054d57610100808354040283529160200191610578565b820191906000526020600020905b81548152906001019060200180831161055b57829003601f168201915b505050505081526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff1660ff1660ff16815250509050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661066b576040517f4523e4c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610708576040517f5535eea400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816002600082815260200190815260200160002060050160009054906101000a900460ff1615610764576040517fb8f9e93600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061076e6114a8565b90506000600260008681526020019081526020016000209050818160050160019054906101000a900460ff1660ff1610156107d5576040517f10c57ccc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018160050160006101000a81548160ff02191690831515021790555060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260030154836004016040516108459190611bc3565b60006040518083038185875af1925050503d8060008114610882576040519150601f19603f3d011682016040523d82523d6000602084013e610887565b606091505b50509050806108c2576040517fb080763500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5c6fc8f8bbcdb3d536e82b833fc64b9280c32b5acd300c029dd9e0aa655bc10360405160405180910390a4505050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461098157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109e7576040517f335cfc6500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060ff1660008054905003610a48576040517f2d3ca68000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610acc576040517f2d3ca68000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b8e6114a8565b600481905550428173ffffffffffffffffffffffffffffffffffffffff167fbf46a52f595053b529700b1ddfd1c7a47d0ae13fdfa123dc62e981694beee63860405160405180910390a350565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c5e576040517f4523e4c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610cfb576040517f5535eea400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816002600082815260200190815260200160002060050160009054906101000a900460ff1615610d57576040517fb8f9e93600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826003600082815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610ded576040517fcd8e608b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060026000868152602001908152602001600020905060018160050160018282829054906101000a900460ff16610e259190611c09565b92506101000a81548160ff021916908360ff16021790555060016003600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550848160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f25b700fc4bed8e5c17e94535355b51698d9793fe30e49e82584858a71ec0d50a60405160405180910390a45050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610faf576040517f4523e4c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461104b576040517f6156f55500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001600015158152602001600060ff168152506002600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040190805190602001906111c692919061156b565b5060a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff021916908360ff1602179055509050508473ffffffffffffffffffffffffffffffffffffffff16843373ffffffffffffffffffffffffffffffffffffffff167f990f3d9ffe92875b8e71fd83ecbd0edab1fd9249dec4b5f775c9343f1b80028486868660405161126d93929190611c8d565b60405180910390a45050505050565b6000818361128a9190611cbf565b905092915050565b600081836112a09190611d48565b905092915050565b600080600090505b8273ffffffffffffffffffffffffffffffffffffffff16600082815481106112db576112da611d79565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461133457808061132c90611da8565b9150506112b0565b80915050919050565b6000805490508110611384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137b90611e4d565b60405180910390fd5b60008190505b600160008054905061139c9190611e6d565b81101561145d5760006001826113b29190611ea1565b815481106113c3576113c2611d79565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000828154811061140257611401611d79565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061145590611da8565b91505061138a565b5060008054806114705761146f611ef7565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550565b60006114f860646114ea7f000000000000000000000000000000000000000000000000000000000000000060ff1660008054905061127c90919063ffffffff16565b61129290919063ffffffff16565b905090565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160608152602001600015158152602001600060ff1681525090565b82805461157790611af3565b90600052602060002090601f01602090048101928261159957600085556115e0565b82601f106115b257805160ff19168380011785556115e0565b828001600101855582156115e0579182015b828111156115df5782518255916020019190600101906115c4565b5b5090506115ed91906115f1565b5090565b5b8082111561160a5760008160009055506001016115f2565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116658261163a565b9050919050565b6116758161165a565b82525050565b6000611687838361166c565b60208301905092915050565b6000602082019050919050565b60006116ab8261160e565b6116b58185611619565b93506116c08361162a565b8060005b838110156116f15781516116d8888261167b565b97506116e383611693565b9250506001810190506116c4565b5085935050505092915050565b6000602082019050818103600083015261171881846116a0565b905092915050565b6000819050919050565b61173381611720565b82525050565b600060208201905061174e600083018461172a565b92915050565b600080fd5b600080fd5b6117678161165a565b811461177257600080fd5b50565b6000813590506117848161175e565b92915050565b6000602082840312156117a05761179f611754565b5b60006117ae84828501611775565b91505092915050565b6117c081611720565b81146117cb57600080fd5b50565b6000813590506117dd816117b7565b92915050565b6000602082840312156117f9576117f8611754565b5b6000611807848285016117ce565b91505092915050565b61181981611720565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561185957808201518184015260208101905061183e565b83811115611868576000848401525b50505050565b6000601f19601f8301169050919050565b600061188a8261181f565b611894818561182a565b93506118a481856020860161183b565b6118ad8161186e565b840191505092915050565b60008115159050919050565b6118cd816118b8565b82525050565b600060ff82169050919050565b6118e9816118d3565b82525050565b600060e083016000830151611907600086018261166c565b50602083015161191a602086018261166c565b50604083015161192d6040860182611810565b5060608301516119406060860182611810565b5060808301518482036080860152611958828261187f565b91505060a083015161196d60a08601826118c4565b5060c083015161198060c08601826118e0565b508091505092915050565b600060208201905081810360008301526119a581846118ef565b905092915050565b6119b6816118d3565b82525050565b60006020820190506119d160008301846119ad565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126119fc576119fb6119d7565b5b8235905067ffffffffffffffff811115611a1957611a186119dc565b5b602083019150836001820283011115611a3557611a346119e1565b5b9250929050565b600080600080600060808688031215611a5857611a57611754565b5b6000611a6688828901611775565b9550506020611a77888289016117ce565b9450506040611a88888289016117ce565b935050606086013567ffffffffffffffff811115611aa957611aa8611759565b5b611ab5888289016119e6565b92509250509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b0b57607f821691505b602082108103611b1e57611b1d611ac4565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154611b5181611af3565b611b5b8186611b24565b94506001821660008114611b765760018114611b8757611bba565b60ff19831686528186019350611bba565b611b9085611b2f565b60005b83811015611bb257815481890152600182019150602081019050611b93565b838801955050505b50505092915050565b6000611bcf8284611b44565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c14826118d3565b9150611c1f836118d3565b92508260ff03821115611c3557611c34611bda565b5b828201905092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000611c6c8385611c40565b9350611c79838584611c51565b611c828361186e565b840190509392505050565b6000604082019050611ca2600083018661172a565b8181036020830152611cb5818486611c60565b9050949350505050565b6000611cca82611720565b9150611cd583611720565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611d0e57611d0d611bda565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d5382611720565b9150611d5e83611720565b925082611d6e57611d6d611d19565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611db382611720565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611de557611de4611bda565b5b600182019050919050565b600082825260208201905092915050565b7f696e646578206f7574206f6620626f756e640000000000000000000000000000600082015250565b6000611e37601283611df0565b9150611e4282611e01565b602082019050919050565b60006020820190508181036000830152611e6681611e2a565b9050919050565b6000611e7882611720565b9150611e8383611720565b925082821015611e9657611e95611bda565b5b828203905092915050565b6000611eac82611720565b9150611eb783611720565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611eec57611eeb611bda565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212200413f75a76816d366029ac8626f1f747bf1f475913da031b092815f51c9ace2664736f6c634300080e0033",
  "devdoc": {
    "author": "Brice Grenard",
    "kind": "dev",
    "methods": {},
    "title": "A multisignature wallet contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOwner(address)": {
        "notice": "Adds a new owner to this contract. A single owner from this contract cannot add a new owner, he/her must send a proposal."
      },
      "confirmTx(uint256)": {
        "notice": "Confirms a proposal (transaction) Every owner stored in this contract may confirm the proposal"
      },
      "constructor": {
        "notice": "Initializes the contract with a pre-defined list of owners Calculate the number of owners required to execute a transaction"
      },
      "executeTx(uint256)": {
        "notice": "Executes a proposal (transaction) if enough owners confirmed it. Any owner stored in this contract may confirm the proposal, even if one has not confirmed it."
      },
      "getNumberOfOwnersRequiredForApproval()": {
        "notice": "Retrieves the number of owners required for a transaction execution."
      },
      "getOwnersAddresses()": {
        "notice": "Returns a list of all owners stored in this contract."
      },
      "getPercentageOfOwnersRequiredForApproval()": {
        "notice": "Get immutable percentage variable of owners required for a transaction execution."
      },
      "getTransaction(uint256)": {
        "notice": "Gets a transaction object for a given nonce"
      },
      "removeOwner(address)": {
        "notice": "Removes an exising owner from this contract. A single owner from this contract cannot remove an existing owner, he/her must send a proposal."
      },
      "submitTx(address,uint256,uint256,bytes)": {
        "notice": "Submits a proposal (transaction) The proposal is for this use case a contract function call passed into the _data parameter I may later use the value for funds withdrawal proposal"
      }
    },
    "notice": "This contract is a mutlisig wallet that is being used for the marketplace contract I have been working on.  It allows any contract's owner to make a proposal. Anyone including the proposal's author is welcomed to confirm it.  If a proposal has gained enough confirmation, the transaction can be executed.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 555,
        "contract": "contracts/MultiSigContract.sol:MultiSig",
        "label": "s_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 559,
        "contract": "contracts/MultiSigContract.sol:MultiSig",
        "label": "s_isOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 564,
        "contract": "contracts/MultiSigContract.sol:MultiSig",
        "label": "s_transactions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Tx)587_storage)"
      },
      {
        "astId": 570,
        "contract": "contracts/MultiSigContract.sol:MultiSig",
        "label": "hasConfirmed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 572,
        "contract": "contracts/MultiSigContract.sol:MultiSig",
        "label": "s_nbOwnerConfirmationsRequiredForApproval",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Tx)587_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiSig.Tx)",
        "numberOfBytes": "32",
        "value": "t_struct(Tx)587_storage"
      },
      "t_struct(Tx)587_storage": {
        "encoding": "inplace",
        "label": "struct MultiSig.Tx",
        "members": [
          {
            "astId": 574,
            "contract": "contracts/MultiSigContract.sol:MultiSig",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 576,
            "contract": "contracts/MultiSigContract.sol:MultiSig",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 578,
            "contract": "contracts/MultiSigContract.sol:MultiSig",
            "label": "nonce",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 580,
            "contract": "contracts/MultiSigContract.sol:MultiSig",
            "label": "value",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 582,
            "contract": "contracts/MultiSigContract.sol:MultiSig",
            "label": "data",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          },
          {
            "astId": 584,
            "contract": "contracts/MultiSigContract.sol:MultiSig",
            "label": "executed",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 586,
            "contract": "contracts/MultiSigContract.sol:MultiSig",
            "label": "nbOwnerConfirmationsProcessed",
            "offset": 1,
            "slot": "5",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}